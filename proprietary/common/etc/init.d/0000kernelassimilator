#!/system/xbin/bash
### Copyright 2014 VanirAOSP
###
### Licensed under the Apache License, Version 2.0 (the "License");
### you may not use this file except in compliance with the License.
### You may obtain a copy of the License at
###
###      http://www.apache.org/licenses/LICENSE-2.0
###
### Unless required by applicable law or agreed to in writing, software
### distributed under the License is distributed on an "AS IS" BASIS,
### WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
### See the License for the specific language governing permissions and
### limitations under the License.
######################################################################################
# Eric McCann @nuclearmistake 2014
#
# big ups to Imoseyon, Koush, and djrbliss for lkflash, anykernel and loki
######################################################################################

#export SPAM=meat_in_a_can
if [ $SPAM ]; then
    set -x
fi

export C=/cache/vanirtmp
[ -e $C ] && rm -R -f $C                                  # clean up shop from last repack

export todo=""
for x in /system/etc/kernelassimilator.d/*; do
    echo '[***]'" testing if $x needs to modify the ramdisk"
    . $x
    if [ $1 ] && [ "$1" = "-f" ] || requires_modification; then
        echo '[***]'" $x will be performed this boot"
        export todo="$todo $x"
    fi
done

if [ "$todo" = "" ]; then
    echo "[+++] NO MODIFICATIONS REQUIRED"
    exit 0
fi

[ -e /cache/ASSIMILATOR.LOG ] && rm /cache/ASSIMILATOR.LOG

export BOOT=$(find /dev/block/platform -name boot)             # find /dev/block/platform/*/by-name/boot
if [ ! $BOOT ]; then
    echo "[---] /boot not found in /dev/block/platform"
    exit 1
fi

if which loki_patch &> /dev/null; then                  # handle loki
    echo "[+++] Device has loki_patch"
    if which loki_unpatch &> /dev/null; then            # test for un-loki existence
        echo "[+++] Device has loki_unpatch"
        export HAS_LOKI=1
        export ABOOT=$(find /dev/block/platform -name aboot)
        if [ ! $ABOOT ]; then
            echo "[---] /aboot not found in /dev/block/platform"
            [ "$_" = "$0" ] && exit 1 || return 1
        fi
    else
        echo "[---] loki_unpatch is required for kernelassimilator"
        [ "$_" = "$0" ] && exit 1 || return 1
    fi
else
    echo "[+++] Device does not require loki"
fi

mkdir -p $C

unpack()
{
    if [ ! $1 ] || [ ! -e $1 ]; then
        echo "[+++] Dumping /boot..."
        if [ $HAS_LOKI ]; then
            dd if=$BOOT of=$C/boot.lok
            if ! loki_unpatch boot $C/boot.lok $C/boot.img; then
                echo "[---] Unpatch failed"
                return 1
            fi
        else
            dd if=$BOOT of=$C/boot.img
        fi
    else
        cp $1 $C/boot.img
    fi
    echo "[+++] unpacking boot.img"
    unpackbootimg -i $C/boot.img -o $C
    mkdir -p $C/root
    cd $C/root
    for x in gunzip unxz unlzma unlzop; do
        $x -c ../boot.img-ramdisk.gz | cpio -i
        [ `ls | wc -l` -eq 0 ] && continue
        echo "[+++] Ramdisk contents extracted"
        echo $x | sed 's/un//g' > $C/.ramdiskcompression;
        return 0
    done
    echo "[---] COULD NOT UNPACK RAMDISK"
    return 1
}

modify()
{
    cd $C/root
    echo "[+++] modifying ramdisk contents"
    for x in $todo; do
        echo '[***] applying '"$x"
        . $x
        if ! apply_modification; then
            echo "[---] Application of $x failed"
            return 1
        fi
    done
    return 0
}

repack()
{
    cd $C/root
    comp=gzip
    [ -e $C/.ramdiskcompression ] && comp=`cat $C/.ramdiskcompression`
    echo "[+++] recompressing ramdisk"
    if ! find . | cpio -o -H newc | $comp > ../boot.img-ramdisk.gz; then
        echo "[---] failed to compress modified ramdisk"
        return 1
    fi
    cd $C
    echo "[+++] repacking boot.img"
    if ! mkbootimg --kernel boot.img-zImage --ramdisk boot.img-ramdisk.gz --cmdline "$(cat boot.img-cmdline)" --base $(cat boot.img-base) --output newboot.img; then
        echo "[---] REPACK boot.img FAILED"
        return 1
    fi
    return 0
}

flash_it()
{
    if [ $HAS_LOKI ]; then
        echo "[+++] loki patching"
        dd if=$ABOOT of=$C/aboot.img
        if ! loki_patch boot $C/aboot.img $C/newboot.img $C/newboot.lok; then
            echo "[---] loki_patch failed"
            return 1
        fi
        echo "[+++] flashing modified boot.lok"
        loki_flash boot $C/newboot.lok
    else
        echo "[+++] flashing modified boot.img"
        dd if=$C/newboot.img of=$BOOT
    fi
    return $?
}

( unpack && modify && repack && flash_it && reboot ) 2>&1 | tee /cache/ASSIMILATOR.LOG
